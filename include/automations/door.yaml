- alias: Main door trigger
  trigger:
    platform: state
    entity_id: binary_sensor.main_door
    to: 'on'
  condition: "{{ is_state('input_boolean.door_led_auto', 'on') }}"
  action:
    service: light.turn_on
    data:
      entity_id: light.door_light_led
      brightness_pct: "{{ states('input_number.door_led_bri') | int }}"

- alias: Main door off trigger
  trigger:
    platform: state
    entity_id: binary_sensor.main_door
    to: 'off'
    for:
      seconds: 7
  condition:
    - "{{ is_state('input_boolean.door_led_auto', 'on') }}"
    - condition: state
      entity_id: binary_sensor.door_motion
      state: 'off'
  action:
    service: light.turn_off
    entity_id: light.door_light_led

- alias: Door motion trigger
  trigger:
    platform: state
    entity_id: binary_sensor.door_motion
    to: 'on'
  condition:
    - "{{ is_state('input_boolean.door_led_auto', 'on') }}"
    - condition: state
      entity_id: binary_sensor.main_door
      state: 'off'
  action:
    service: light.turn_on
    data:
      entity_id: light.door_light_led
      brightness_pct: "{{ states('input_number.door_led_bri') | int }}"

- alias: Door motion off trigger
  trigger:
    platform: state
    entity_id: binary_sensor.door_motion
    to: 'off'
    for:
      seconds: 25
  condition:
    - "{{ is_state('input_boolean.door_led_auto', 'on') }}"
    - condition: state
      entity_id: binary_sensor.main_door
      state: 'off'
  action:
    service: light.turn_off
    entity_id: light.door_light_led

- alias: Door LED sync brightness
  trigger:
    platform: state
    entity_id: input_number.door_led_bri
  condition:
    - "{{ is_state('input_boolean.door_led_auto', 'on') }}"
    - "{{ is_state('light.door_light_led', 'on') }}"
  action:
    service: light.turn_on
    data:
      entity_id: light.door_light_led
      brightness_pct: "{{ states('input_number.door_led_bri') | int }}"

- alias: Door open notification
  trigger:
    platform: state
    entity_id: binary_sensor.main_door
  action:
    - service: notify.notify_all
      data:
        message: >
          {% if trigger.to_state.state == 'on' %}
            Door has been open.
          {% else %}
            Door has been closed.
          {% endif %}

- alias: Door open notification
  trigger:
    platform: state
    entity_id: binary_sensor.main_door
    to: 'on'
    for:
      minutes: 1
  action:
    - service: notify.notify_all
      data:
        message: "Warning! Door is opened for too long"

- alias: Unifi doorbell ring
  trigger:
    platform: event
    event_type: unifiprotect_doorbell
  action:
    - service: notify.notify_all
      data:
        message: "Somebody ringing!"
        data:
          entity_id: camera.floor_5
    - service: image_processing.scan
      target:
        entity_id:
          - image_processing.face_floor_5
    - service: camera.snapshot
      target:
        entity_id: camera.floor_5
      data:
        filename: /tmp/camera_doorbell.jpg
    - service: notify.tg_me
      data:
        message: "Somebody ringing!"
        data:
          photo:
            - file: /tmp/camera_doorbell.jpg
    - service: switch.turn_on
      entity_id: switch.ring
    - delay: '00:00:02'
    - service: switch.turn_off
      entity_id: switch.ring

- alias: Face test
  trigger:
    platform: event
    event_type: image_processing.detect_face
  condition:
    - "{{ trigger.event.data.confidence | int > 70 }}"
  action:
    - service: script.open_main_door
    - service: notify.notify_all
      data:
        message: "Opened door for {{ trigger.event.data.name }} with confidence {{ trigger.event.data.confidence }}"
    - service: system_log.write
      data:
        message: "Face debug: {{ trigger.event.data }}"
        level: warning
        logger: deepstack
    - service: unifiprotect.set_doorbell_lcd_message
      data:
        entity_id: camera.floor_5
        message: "Hi, {{ trigger.event.data.name }}"
        duration: 1
    - delay: "00:00:10"
    - service: unifiprotect.set_doorbell_lcd_message
      data:
        entity_id: camera.floor_5
        message: ""
        duration: 0

- alias: Face test
  trigger:
    platform: event
    event_type: image_processing.detect_face
  condition:
    - "{{ trigger.event.data.confidence | int <= 70 }}"
  action:
    - service: notify.notify_all
      data:
        message: "Scanned {{ trigger.event.data.name }} face with confidence {{ trigger.event.data.confidence }}"
    - service: system_log.write
      data:
        message: "Face debug: {{ trigger.event.data }}"
        level: warning
        logger: deepstack
